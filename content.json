[{"title":"算法","date":"2017-10-31T05:26:55.000Z","path":"2017/10/31/算法/","text":"","tags":[]},{"title":"evaluate","date":"2017-10-30T00:42:07.000Z","path":"2017/10/30/evaluate/index/","text":"Dijkatra的双栈算术表达式求值算法 算法第四版(java版) P 80-81 123456789101112131415161718192021222324252627282930import java.util.Stack;public class Evaluate &#123; public static void main(String[] args) &#123; Stack&lt;String&gt; ops = new Stack&lt;String&gt;(); Stack&lt;Double&gt; vals = new Stack&lt;Double&gt;(); while (!StdIn.isEmpty()) &#123; String s = StdIn.readString(); if (s.equals(\"(\")) ; else if (s.equals(\"+\")) ops.push(s); else if (s.equals('-')) ops.push(s); else if (s.equals(\"*\")) ops.push(s); else if (s.equals(\"/\")) ops.push(s); else if (s.equals(\"sqrt\")) ops.push(s); else if (s.equals(\")\")) &#123; // pop stack String op = ops.pop(); Double val = vals.pop(); if (op.equals(\"+\")) val = vals.pop() + val; else if (op.equals(\"-\")) val = vals.pop() - val; else if (op.equals(\"*\")) val = vals.pop() * val; else if (op.equals(\"/\")) val = vals.pop() / val; else if (op.equals(\"sqrt\")) val = Math.sqrt(val); vals.push(val); &#125; else vals.push(Double.parseDouble(s)); &#125; System.out.println(vals.pop()); &#125;&#125; evaluate_data.txt 1( ( 1 + sqrt ( 5.0 ) ) / 2.0 ) 运算结果 123$ javac Evaluate.java$ java Evaluate &lt; evaluate_data.txt$ 1.618033988749895 分析 将操作数压入操作数栈 将运算符压入运算符栈 忽略左括号 在遇到有括号时，弹出一个运算符，以及所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈 例如： ( 1 + ( 2 + 3 ) ( 4 5 ) ) ( 1 + ( 5 ) ( 4 5 ) ) ( 1 + ( 5 ) * ( 20 ) ) ( 1 + 100 ) 101 图解 evaluate图解 源代码github download","tags":[{"name":"算法","slug":"算法","permalink":"http://blog.hzhihua.top/tags/算法/"},{"name":"evaluate","slug":"evaluate","permalink":"http://blog.hzhihua.top/tags/evaluate/"}]},{"title":"binarySearch","date":"2017-10-28T04:59:23.000Z","path":"2017/10/28/binarySearch/index/","text":"","tags":[]}]