<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄志华的博客</title>
  <icon>https://www.gravatar.com/avatar/8b57dc95e154c4e79990a11653055cb5</icon>
  <subtitle>目前在学习算法第四版(java版)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hzhihua.top/"/>
  <updated>2017-11-15T05:09:28.285Z</updated>
  <id>http://blog.hzhihua.top/</id>
  
  <author>
    <name>Hzhihua</name>
    <email>cnzhihua@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双栈算术表达式求值算法</title>
    <link href="http://blog.hzhihua.top/2017/10/30/evaluate/index/"/>
    <id>http://blog.hzhihua.top/2017/10/30/evaluate/index/</id>
    <published>2017-10-30T00:42:07.000Z</published>
    <updated>2017-11-15T05:09:28.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dijkatra的双栈算术表达式求值算法"><a href="#Dijkatra的双栈算术表达式求值算法" class="headerlink" title="Dijkatra的双栈算术表达式求值算法"></a>Dijkatra的双栈算术表达式求值算法</h1><blockquote><p>算法第四版(java版)  P 80-81</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> Stack&lt;Double&gt;();</div><div class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</div><div class="line">            String s = StdIn.readString();</div><div class="line">            <span class="keyword">if</span>      (s.equals(<span class="string">"("</span>))               ;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>))    ops.push(s);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">'-'</span>))    ops.push(s);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>))    ops.push(s);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>))    ops.push(s);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"sqrt"</span>)) ops.push(s);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">")"</span>)) &#123;</div><div class="line">                <span class="comment">// pop stack</span></div><div class="line">                String op = ops.pop();</div><div class="line">                Double val = vals.pop();</div><div class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>))         val = vals.pop() + val;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>))    val = vals.pop() - val;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>))    val = vals.pop() * val;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>))    val = vals.pop() / val;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"sqrt"</span>)) val = Math.sqrt(val);</div><div class="line">                vals.push(val);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> vals.push(Double.parseDouble(s));</div><div class="line">        &#125;</div><div class="line">        System.out.println(vals.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>evaluate_data.txt</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( ( 1 + sqrt ( 5.0 ) ) / 2.0 )</div></pre></td></tr></table></figure><blockquote><p>运算结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ javac Evaluate.java</div><div class="line">$ java Evaluate &lt; evaluate_data.txt</div><div class="line">$ 1.618033988749895</div></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li><p>将操作数压入操作数栈</p></li><li><p>将运算符压入运算符栈</p></li><li><p>忽略左括号</p></li><li><p>在遇到有括号时，弹出一个运算符，以及所需数量的操作数，并将运算符和操作数的运算结果压入操作数栈</p></li><li><p>例如：</p><p>( 1 + ( 2 + 3 ) <em> ( 4 </em> 5 ) )</p><p>( 1 + ( 5 ) <em> ( 4 </em> 5 ) )</p><p>( 1 + ( 5 ) * ( 20 ) )</p><p>( 1 + 100 )</p><p>101</p></li></ol><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/evaluate/Dijkstra-evaluate.png" alt="evaluate图解" title="">                </div>                <div class="image-caption">evaluate图解</div>            </figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/Hzhihua/hzhihua.github.io-backup/tree/master/source/_posts/evaluate" target="_blank" rel="external">github</a> <a href="/download/evaluate/Evaluate.tar.gz">download</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dijkatra的双栈算术表达式求值算法&quot;&gt;&lt;a href=&quot;#Dijkatra的双栈算术表达式求值算法&quot; class=&quot;headerlink&quot; title=&quot;Dijkatra的双栈算术表达式求值算法&quot;&gt;&lt;/a&gt;Dijkatra的双栈算术表达式求值算法&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="算法(第四版)" scheme="http://blog.hzhihua.top/categories/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
      <category term="算法(第四版)" scheme="http://blog.hzhihua.top/tags/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
      <category term="第一章" scheme="http://blog.hzhihua.top/tags/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>二分查找法</title>
    <link href="http://blog.hzhihua.top/2017/10/28/binarySearch/index/"/>
    <id>http://blog.hzhihua.top/2017/10/28/binarySearch/index/</id>
    <published>2017-10-28T04:59:23.000Z</published>
    <updated>2017-11-15T05:41:11.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h1><p>假设你要在电话簿中查找一个以K开头的名字（现在谁还用电话簿！），可以从头开始翻页，一直翻到以K开头的部分。但是你应该不会这样做，而是直接从中间开始查找，因为你知道以K开头的名字在电话簿中间。</p><p>现在假设你要登录Facebook。当你登录的时候，Facebook肯定会核实一下你的账号是否在Facebook上注册过。假设你的用户名为Karlmageddon，Facebook可以从以A开头的部分开始查找，但是更符合逻辑的方法是从中间找起。</p><p>这是一个查找问题，在以上所描述的所有情况下，都可以使用同一种算法来解决问题，这中算法就是<em>二分查找</em> 。</p><h2 id="什么是二分查找法"><a href="#什么是二分查找法" class="headerlink" title="什么是二分查找法"></a>什么是二分查找法</h2><p>在一个 <em>有序数组</em> (必须是有序数组)中查找某一个特定元素的算法。搜索过程从中间开始，如果中间元素正好是要搜索的元素，则搜索过程结束。如果中间元素大于要搜索的元素，则在小于中间元素的另一半中查找。若中间元素小于要搜索的元素，则在大于中间元素的另一半中查找。</p><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarySearch/Binary_search_into_array.png" alt="二分查找图解" title="">                </div>                <div class="image-caption">二分查找图解</div>            </figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查找指定元素是否存在有序数组中</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>  int key 要查找的元素</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>  array a 有序数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 查找成功返回指定索引的位置，失败返回 -1</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span>[] a)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// 数组必须是有序的</span></div><div class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> hi = a.length - <span class="number">1</span>; <span class="comment">// 获取数组的最大索引</span></div><div class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>; <span class="comment">// 中间元素索引</span></div><div class="line">        <span class="keyword">while</span> (lo &lt;= hi)</div><div class="line">        &#123;</div><div class="line">            mid = lo + (hi - lo) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (a[mid] == key)</div><div class="line">              <span class="keyword">return</span> mid;</div><div class="line">            <span class="keyword">if</span> (a[mid] &gt; key)</div><div class="line">              hi = mid - <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; key)</div><div class="line">              lo = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="增长数量级分类"><a href="#增长数量级分类" class="headerlink" title="增长数量级分类"></a>增长数量级分类</h2><blockquote><p> 此算法属于 <em>对数级别(logN)</em> log底数为2 </p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>位于算法(第四版)28页</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二分查找法&quot;&gt;&lt;a href=&quot;#二分查找法&quot; class=&quot;headerlink&quot; title=&quot;二分查找法&quot;&gt;&lt;/a&gt;二分查找法&lt;/h1&gt;&lt;p&gt;假设你要在电话簿中查找一个以K开头的名字（现在谁还用电话簿！），可以从头开始翻页，一直翻到以K开头的部分。但是你应该
      
    
    </summary>
    
      <category term="算法(第四版)" scheme="http://blog.hzhihua.top/categories/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
      <category term="算法(第四版)" scheme="http://blog.hzhihua.top/tags/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
      <category term="第一章" scheme="http://blog.hzhihua.top/tags/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
  </entry>
  
</feed>
